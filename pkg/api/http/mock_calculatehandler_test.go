// Code generated by MockGen. DO NOT EDIT.
// Source: calculatehandler.go
//
// Generated by this command:
//
//	mockgen -source=calculatehandler.go -destination=mock_calculatehandler_test.go -package=http FlightsTracker,FlightsParser
//
// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	domain "github.com/tonytcb/flight-path-tracker/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockFlightsTracker is a mock of FlightsTracker interface.
type MockFlightsTracker struct {
	ctrl     *gomock.Controller
	recorder *MockFlightsTrackerMockRecorder
}

// MockFlightsTrackerMockRecorder is the mock recorder for MockFlightsTracker.
type MockFlightsTrackerMockRecorder struct {
	mock *MockFlightsTracker
}

// NewMockFlightsTracker creates a new mock instance.
func NewMockFlightsTracker(ctrl *gomock.Controller) *MockFlightsTracker {
	mock := &MockFlightsTracker{ctrl: ctrl}
	mock.recorder = &MockFlightsTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightsTracker) EXPECT() *MockFlightsTrackerMockRecorder {
	return m.recorder
}

// Track mocks base method.
func (m *MockFlightsTracker) Track(arg0 context.Context, arg1 domain.Flights) (*domain.Flight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", arg0, arg1)
	ret0, _ := ret[0].(*domain.Flight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Track indicates an expected call of Track.
func (mr *MockFlightsTrackerMockRecorder) Track(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockFlightsTracker)(nil).Track), arg0, arg1)
}

// MockFlightsParser is a mock of FlightsParser interface.
type MockFlightsParser struct {
	ctrl     *gomock.Controller
	recorder *MockFlightsParserMockRecorder
}

// MockFlightsParserMockRecorder is the mock recorder for MockFlightsParser.
type MockFlightsParserMockRecorder struct {
	mock *MockFlightsParser
}

// NewMockFlightsParser creates a new mock instance.
func NewMockFlightsParser(ctrl *gomock.Controller) *MockFlightsParser {
	mock := &MockFlightsParser{ctrl: ctrl}
	mock.recorder = &MockFlightsParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightsParser) EXPECT() *MockFlightsParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockFlightsParser) Parse(arg0 context.Context, arg1 []byte) (domain.Flights, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(domain.Flights)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockFlightsParserMockRecorder) Parse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockFlightsParser)(nil).Parse), arg0, arg1)
}
